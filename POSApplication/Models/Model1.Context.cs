//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POSApplication.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PosintofsaleEntities : DbContext
    {
        public PosintofsaleEntities()
            : base("name=PosintofsaleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<BankPayment> BankPayments { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<EmployeeAdvance> EmployeeAdvances { get; set; }
        public virtual DbSet<EmployeeLoan> EmployeeLoans { get; set; }
        public virtual DbSet<Engineer> Engineers { get; set; }
        public virtual DbSet<Exchange> Exchanges { get; set; }
        public virtual DbSet<ExchangeDetail> ExchangeDetails { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
        public virtual DbSet<ExpensesType> ExpensesTypes { get; set; }
        public virtual DbSet<Generation> Generations { get; set; }
        public virtual DbSet<HardDisk> HardDisks { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<PaymentVoucherCustomer> PaymentVoucherCustomers { get; set; }
        public virtual DbSet<PaymentVoucherSupplier> PaymentVoucherSuppliers { get; set; }
        public virtual DbSet<Processor> Processors { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProfitAndLoss> ProfitAndLosses { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public virtual DbSet<Ram> Rams { get; set; }
        public virtual DbSet<Repairing> Repairings { get; set; }
        public virtual DbSet<Salary> Salaries { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SalesDetail> SalesDetails { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
    
        public virtual ObjectResult<ps_purchase_Result> ps_purchase(Nullable<int> poNumber, Nullable<int> poReference)
        {
            var poNumberParameter = poNumber.HasValue ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(int));
    
            var poReferenceParameter = poReference.HasValue ?
                new ObjectParameter("PoReference", poReference) :
                new ObjectParameter("PoReference", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ps_purchase_Result>("ps_purchase", poNumberParameter, poReferenceParameter);
        }
    
        public virtual ObjectResult<ps_sales_Result> ps_sales(Nullable<int> salesid)
        {
            var salesidParameter = salesid.HasValue ?
                new ObjectParameter("salesid", salesid) :
                new ObjectParameter("salesid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ps_sales_Result>("ps_sales", salesidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_BankAccounts(Nullable<int> brancID, string bankName, string accountTitle, string accountNumber, string iBANNumber, string bankBranch)
        {
            var brancIDParameter = brancID.HasValue ?
                new ObjectParameter("BrancID", brancID) :
                new ObjectParameter("BrancID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountTitleParameter = accountTitle != null ?
                new ObjectParameter("AccountTitle", accountTitle) :
                new ObjectParameter("AccountTitle", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var iBANNumberParameter = iBANNumber != null ?
                new ObjectParameter("IBANNumber", iBANNumber) :
                new ObjectParameter("IBANNumber", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_BankAccounts", brancIDParameter, bankNameParameter, accountTitleParameter, accountNumberParameter, iBANNumberParameter, bankBranchParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_BankPayments(Nullable<int> branchID, Nullable<int> bankAccountID, Nullable<int> customerID, Nullable<int> salesID, Nullable<int> bankID, string cheqNumber, string pdcDate)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var cheqNumberParameter = cheqNumber != null ?
                new ObjectParameter("CheqNumber", cheqNumber) :
                new ObjectParameter("CheqNumber", typeof(string));
    
            var pdcDateParameter = pdcDate != null ?
                new ObjectParameter("PdcDate", pdcDate) :
                new ObjectParameter("PdcDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_BankPayments", branchIDParameter, bankAccountIDParameter, customerIDParameter, salesIDParameter, bankIDParameter, cheqNumberParameter, pdcDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Banks(string bankName, Nullable<int> isDeleted)
        {
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Banks", bankNameParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Branches(string branchName, Nullable<int> isActive, Nullable<int> isDeleted)
        {
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Branches", branchNameParameter, isActiveParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Brands(string brandName)
        {
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Brands", brandNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Commission(Nullable<int> branchID, Nullable<int> employeeID, Nullable<int> salesID, string salesDate, Nullable<decimal> commissionAmount)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var salesDateParameter = salesDate != null ?
                new ObjectParameter("SalesDate", salesDate) :
                new ObjectParameter("SalesDate", typeof(string));
    
            var commissionAmountParameter = commissionAmount.HasValue ?
                new ObjectParameter("CommissionAmount", commissionAmount) :
                new ObjectParameter("CommissionAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Commission", branchIDParameter, employeeIDParameter, salesIDParameter, salesDateParameter, commissionAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Customers(Nullable<int> branchID, string customerName, string contactNumber, string customerReference, string address)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var customerReferenceParameter = customerReference != null ?
                new ObjectParameter("CustomerReference", customerReference) :
                new ObjectParameter("CustomerReference", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Customers", branchIDParameter, customerNameParameter, contactNumberParameter, customerReferenceParameter, addressParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_EmployeeAdvance(Nullable<int> branchID, Nullable<int> employeeID, string advanceDate, Nullable<decimal> advanceAmount)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var advanceDateParameter = advanceDate != null ?
                new ObjectParameter("AdvanceDate", advanceDate) :
                new ObjectParameter("AdvanceDate", typeof(string));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_EmployeeAdvance", branchIDParameter, employeeIDParameter, advanceDateParameter, advanceAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_EmployeeLoan(Nullable<int> branchID, Nullable<int> employeeID, string loanDate, Nullable<decimal> loanAmount, Nullable<decimal> installmentAmount, Nullable<int> paidInstallment, Nullable<int> numberOfInstallment)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var loanDateParameter = loanDate != null ?
                new ObjectParameter("LoanDate", loanDate) :
                new ObjectParameter("LoanDate", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var installmentAmountParameter = installmentAmount.HasValue ?
                new ObjectParameter("InstallmentAmount", installmentAmount) :
                new ObjectParameter("InstallmentAmount", typeof(decimal));
    
            var paidInstallmentParameter = paidInstallment.HasValue ?
                new ObjectParameter("PaidInstallment", paidInstallment) :
                new ObjectParameter("PaidInstallment", typeof(int));
    
            var numberOfInstallmentParameter = numberOfInstallment.HasValue ?
                new ObjectParameter("numberOfInstallment", numberOfInstallment) :
                new ObjectParameter("numberOfInstallment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_EmployeeLoan", branchIDParameter, employeeIDParameter, loanDateParameter, loanAmountParameter, installmentAmountParameter, paidInstallmentParameter, numberOfInstallmentParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Engineers(Nullable<int> branchID, string engineerName, string contactPerson, string contactNumber, string address)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var engineerNameParameter = engineerName != null ?
                new ObjectParameter("EngineerName", engineerName) :
                new ObjectParameter("EngineerName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Engineers", branchIDParameter, engineerNameParameter, contactPersonParameter, contactNumberParameter, addressParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Exchange(string pO, string poDate, Nullable<int> customerID, Nullable<decimal> totalAmount, Nullable<decimal> payableAmount, Nullable<int> isPaid, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> isDeleted)
        {
            var pOParameter = pO != null ?
                new ObjectParameter("PO", pO) :
                new ObjectParameter("PO", typeof(string));
    
            var poDateParameter = poDate != null ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Exchange", pOParameter, poDateParameter, customerIDParameter, totalAmountParameter, payableAmountParameter, isPaidParameter, creationDateParameter, createdByParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_ExchangeDetails(Nullable<int> exchangeID, Nullable<int> categoryID, Nullable<int> productID, Nullable<int> brandID, Nullable<int> modelID, Nullable<int> generation, Nullable<int> hardDiskID, Nullable<int> hDDAvailable, Nullable<int> ramID, Nullable<int> ramAvailable, Nullable<int> processorID, string screen, Nullable<int> screenAvailable, string keboard, Nullable<int> keyboardAvailable, string charger, Nullable<int> chargerAvailable, string board, Nullable<int> boardAvailable)
        {
            var exchangeIDParameter = exchangeID.HasValue ?
                new ObjectParameter("ExchangeID", exchangeID) :
                new ObjectParameter("ExchangeID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var generationParameter = generation.HasValue ?
                new ObjectParameter("Generation", generation) :
                new ObjectParameter("Generation", typeof(int));
    
            var hardDiskIDParameter = hardDiskID.HasValue ?
                new ObjectParameter("HardDiskID", hardDiskID) :
                new ObjectParameter("HardDiskID", typeof(int));
    
            var hDDAvailableParameter = hDDAvailable.HasValue ?
                new ObjectParameter("HDDAvailable", hDDAvailable) :
                new ObjectParameter("HDDAvailable", typeof(int));
    
            var ramIDParameter = ramID.HasValue ?
                new ObjectParameter("RamID", ramID) :
                new ObjectParameter("RamID", typeof(int));
    
            var ramAvailableParameter = ramAvailable.HasValue ?
                new ObjectParameter("RamAvailable", ramAvailable) :
                new ObjectParameter("RamAvailable", typeof(int));
    
            var processorIDParameter = processorID.HasValue ?
                new ObjectParameter("ProcessorID", processorID) :
                new ObjectParameter("ProcessorID", typeof(int));
    
            var screenParameter = screen != null ?
                new ObjectParameter("Screen", screen) :
                new ObjectParameter("Screen", typeof(string));
    
            var screenAvailableParameter = screenAvailable.HasValue ?
                new ObjectParameter("ScreenAvailable", screenAvailable) :
                new ObjectParameter("ScreenAvailable", typeof(int));
    
            var keboardParameter = keboard != null ?
                new ObjectParameter("Keboard", keboard) :
                new ObjectParameter("Keboard", typeof(string));
    
            var keyboardAvailableParameter = keyboardAvailable.HasValue ?
                new ObjectParameter("KeyboardAvailable", keyboardAvailable) :
                new ObjectParameter("KeyboardAvailable", typeof(int));
    
            var chargerParameter = charger != null ?
                new ObjectParameter("Charger", charger) :
                new ObjectParameter("Charger", typeof(string));
    
            var chargerAvailableParameter = chargerAvailable.HasValue ?
                new ObjectParameter("ChargerAvailable", chargerAvailable) :
                new ObjectParameter("ChargerAvailable", typeof(int));
    
            var boardParameter = board != null ?
                new ObjectParameter("Board", board) :
                new ObjectParameter("Board", typeof(string));
    
            var boardAvailableParameter = boardAvailable.HasValue ?
                new ObjectParameter("BoardAvailable", boardAvailable) :
                new ObjectParameter("BoardAvailable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_ExchangeDetails", exchangeIDParameter, categoryIDParameter, productIDParameter, brandIDParameter, modelIDParameter, generationParameter, hardDiskIDParameter, hDDAvailableParameter, ramIDParameter, ramAvailableParameter, processorIDParameter, screenParameter, screenAvailableParameter, keboardParameter, keyboardAvailableParameter, chargerParameter, chargerAvailableParameter, boardParameter, boardAvailableParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Expenses(Nullable<int> branchID, Nullable<int> expensesTypeID, string expensesDate, string remarks, Nullable<int> expensesByID, Nullable<int> createdByUserID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var expensesTypeIDParameter = expensesTypeID.HasValue ?
                new ObjectParameter("ExpensesTypeID", expensesTypeID) :
                new ObjectParameter("ExpensesTypeID", typeof(int));
    
            var expensesDateParameter = expensesDate != null ?
                new ObjectParameter("ExpensesDate", expensesDate) :
                new ObjectParameter("ExpensesDate", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var expensesByIDParameter = expensesByID.HasValue ?
                new ObjectParameter("ExpensesByID", expensesByID) :
                new ObjectParameter("ExpensesByID", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Expenses", branchIDParameter, expensesTypeIDParameter, expensesDateParameter, remarksParameter, expensesByIDParameter, createdByUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_ExpensesTypes(string expensesTypeName)
        {
            var expensesTypeNameParameter = expensesTypeName != null ?
                new ObjectParameter("ExpensesTypeName", expensesTypeName) :
                new ObjectParameter("ExpensesTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_ExpensesTypes", expensesTypeNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Generations(string generationName)
        {
            var generationNameParameter = generationName != null ?
                new ObjectParameter("GenerationName", generationName) :
                new ObjectParameter("GenerationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Generations", generationNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_HardDisk(string hardDiskName)
        {
            var hardDiskNameParameter = hardDiskName != null ?
                new ObjectParameter("HardDiskName", hardDiskName) :
                new ObjectParameter("HardDiskName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_HardDisk", hardDiskNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Models(string modelName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Models", modelNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_PaymentMethod(string paymentMethodName)
        {
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("PaymentMethodName", paymentMethodName) :
                new ObjectParameter("PaymentMethodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_PaymentMethod", paymentMethodNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_PaymentMode(string paymentModeName)
        {
            var paymentModeNameParameter = paymentModeName != null ?
                new ObjectParameter("PaymentModeName", paymentModeName) :
                new ObjectParameter("PaymentModeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_PaymentMode", paymentModeNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_PaymentVoucherCustomers(Nullable<int> branchID, Nullable<int> customerID, Nullable<int> salesID, Nullable<int> paymetMethodID, Nullable<int> bankID, string chequeNumber, string payOrderNumber, Nullable<int> isPDC, string pDCDate, Nullable<int> isPdcClear, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<decimal> balance, Nullable<int> condition, Nullable<int> createdByUserID, Nullable<int> transactionTypeID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var paymetMethodIDParameter = paymetMethodID.HasValue ?
                new ObjectParameter("PaymetMethodID", paymetMethodID) :
                new ObjectParameter("PaymetMethodID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var payOrderNumberParameter = payOrderNumber != null ?
                new ObjectParameter("PayOrderNumber", payOrderNumber) :
                new ObjectParameter("PayOrderNumber", typeof(string));
    
            var isPDCParameter = isPDC.HasValue ?
                new ObjectParameter("IsPDC", isPDC) :
                new ObjectParameter("IsPDC", typeof(int));
    
            var pDCDateParameter = pDCDate != null ?
                new ObjectParameter("PDCDate", pDCDate) :
                new ObjectParameter("PDCDate", typeof(string));
    
            var isPdcClearParameter = isPdcClear.HasValue ?
                new ObjectParameter("IsPdcClear", isPdcClear) :
                new ObjectParameter("IsPdcClear", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("TransactionTypeID", transactionTypeID) :
                new ObjectParameter("TransactionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_PaymentVoucherCustomers", branchIDParameter, customerIDParameter, salesIDParameter, paymetMethodIDParameter, bankIDParameter, chequeNumberParameter, payOrderNumberParameter, isPDCParameter, pDCDateParameter, isPdcClearParameter, debitParameter, creditParameter, balanceParameter, conditionParameter, createdByUserIDParameter, transactionTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_PaymentVoucherSupplier(Nullable<int> branchID, Nullable<int> supplierID, Nullable<int> purchaseID, Nullable<int> paymetMethodID, Nullable<int> bankID, string chequeNumber, string payOrderNumber, Nullable<int> isPDC, string pDCDate, Nullable<int> isPdcClear, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<decimal> balance, Nullable<int> condition, Nullable<int> createdByUserID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var paymetMethodIDParameter = paymetMethodID.HasValue ?
                new ObjectParameter("PaymetMethodID", paymetMethodID) :
                new ObjectParameter("PaymetMethodID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var payOrderNumberParameter = payOrderNumber != null ?
                new ObjectParameter("PayOrderNumber", payOrderNumber) :
                new ObjectParameter("PayOrderNumber", typeof(string));
    
            var isPDCParameter = isPDC.HasValue ?
                new ObjectParameter("IsPDC", isPDC) :
                new ObjectParameter("IsPDC", typeof(int));
    
            var pDCDateParameter = pDCDate != null ?
                new ObjectParameter("PDCDate", pDCDate) :
                new ObjectParameter("PDCDate", typeof(string));
    
            var isPdcClearParameter = isPdcClear.HasValue ?
                new ObjectParameter("IsPdcClear", isPdcClear) :
                new ObjectParameter("IsPdcClear", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_PaymentVoucherSupplier", branchIDParameter, supplierIDParameter, purchaseIDParameter, paymetMethodIDParameter, bankIDParameter, chequeNumberParameter, payOrderNumberParameter, isPDCParameter, pDCDateParameter, isPdcClearParameter, debitParameter, creditParameter, balanceParameter, conditionParameter, createdByUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Processor(string processorName)
        {
            var processorNameParameter = processorName != null ?
                new ObjectParameter("ProcessorName", processorName) :
                new ObjectParameter("ProcessorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Processor", processorNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_ProductCategory(Nullable<int> branchID, string categoryName)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_ProductCategory", branchIDParameter, categoryNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Products(Nullable<int> branchID, Nullable<int> prodcutCategoryID, string productName, string brandNameID, string modelID, string generationID, string ramID, string hardDiskID, string processorID, string productImage)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var prodcutCategoryIDParameter = prodcutCategoryID.HasValue ?
                new ObjectParameter("ProdcutCategoryID", prodcutCategoryID) :
                new ObjectParameter("ProdcutCategoryID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var brandNameIDParameter = brandNameID != null ?
                new ObjectParameter("BrandNameID", brandNameID) :
                new ObjectParameter("BrandNameID", typeof(string));
    
            var modelIDParameter = modelID != null ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(string));
    
            var generationIDParameter = generationID != null ?
                new ObjectParameter("GenerationID", generationID) :
                new ObjectParameter("GenerationID", typeof(string));
    
            var ramIDParameter = ramID != null ?
                new ObjectParameter("RamID", ramID) :
                new ObjectParameter("RamID", typeof(string));
    
            var hardDiskIDParameter = hardDiskID != null ?
                new ObjectParameter("HardDiskID", hardDiskID) :
                new ObjectParameter("HardDiskID", typeof(string));
    
            var processorIDParameter = processorID != null ?
                new ObjectParameter("ProcessorID", processorID) :
                new ObjectParameter("ProcessorID", typeof(string));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Products", branchIDParameter, prodcutCategoryIDParameter, productNameParameter, brandNameIDParameter, modelIDParameter, generationIDParameter, ramIDParameter, hardDiskIDParameter, processorIDParameter, productImageParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_ProfitAndLoss(Nullable<int> branchID, Nullable<int> purchaseDetailID, Nullable<int> salesID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> purchasePrice, Nullable<decimal> purchaseAmount, Nullable<decimal> salesPrice, Nullable<decimal> salesAmount, Nullable<decimal> profit, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isDeleted)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var purchaseDetailIDParameter = purchaseDetailID.HasValue ?
                new ObjectParameter("PurchaseDetailID", purchaseDetailID) :
                new ObjectParameter("PurchaseDetailID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var purchaseAmountParameter = purchaseAmount.HasValue ?
                new ObjectParameter("PurchaseAmount", purchaseAmount) :
                new ObjectParameter("PurchaseAmount", typeof(decimal));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(decimal));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(decimal));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_ProfitAndLoss", branchIDParameter, purchaseDetailIDParameter, salesIDParameter, productIDParameter, quantityParameter, purchasePriceParameter, purchaseAmountParameter, salesPriceParameter, salesAmountParameter, profitParameter, creationDateParameter, createdByUserIDParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Purchase(Nullable<int> branchID, Nullable<int> isTransferFromBranch, Nullable<int> transferFromBranchID, string poNumber, string poDate, string poReference, Nullable<int> supplierID, Nullable<int> paymentMode, Nullable<decimal> totalAmount, Nullable<int> taxPer, Nullable<decimal> taxAmount, Nullable<decimal> payableAmount, Nullable<decimal> balance, Nullable<int> createdBy)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var isTransferFromBranchParameter = isTransferFromBranch.HasValue ?
                new ObjectParameter("IsTransferFromBranch", isTransferFromBranch) :
                new ObjectParameter("IsTransferFromBranch", typeof(int));
    
            var transferFromBranchIDParameter = transferFromBranchID.HasValue ?
                new ObjectParameter("TransferFromBranchID", transferFromBranchID) :
                new ObjectParameter("TransferFromBranchID", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var poDateParameter = poDate != null ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(string));
    
            var poReferenceParameter = poReference != null ?
                new ObjectParameter("PoReference", poReference) :
                new ObjectParameter("PoReference", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxPerParameter = taxPer.HasValue ?
                new ObjectParameter("TaxPer", taxPer) :
                new ObjectParameter("TaxPer", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Purchase", branchIDParameter, isTransferFromBranchParameter, transferFromBranchIDParameter, poNumberParameter, poDateParameter, poReferenceParameter, supplierIDParameter, paymentModeParameter, totalAmountParameter, taxPerParameter, taxAmountParameter, payableAmountParameter, balanceParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_PurchaseDetails(Nullable<int> purchaseID, Nullable<int> prodcutCategoryID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> unitPrice, Nullable<decimal> amount, Nullable<int> stockQuantity)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var prodcutCategoryIDParameter = prodcutCategoryID.HasValue ?
                new ObjectParameter("ProdcutCategoryID", prodcutCategoryID) :
                new ObjectParameter("ProdcutCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_PurchaseDetails", purchaseIDParameter, prodcutCategoryIDParameter, productIDParameter, quantityParameter, unitPriceParameter, amountParameter, stockQuantityParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Rams(string ramName)
        {
            var ramNameParameter = ramName != null ?
                new ObjectParameter("RamName", ramName) :
                new ObjectParameter("RamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Rams", ramNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Repairing(Nullable<int> branchID, Nullable<int> engineerID, string assignDate, Nullable<int> productID, string itemDescription, string defectDescription, Nullable<decimal> amountToBeCharge, string returnDate, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isReturn)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var engineerIDParameter = engineerID.HasValue ?
                new ObjectParameter("EngineerID", engineerID) :
                new ObjectParameter("EngineerID", typeof(int));
    
            var assignDateParameter = assignDate != null ?
                new ObjectParameter("AssignDate", assignDate) :
                new ObjectParameter("AssignDate", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var defectDescriptionParameter = defectDescription != null ?
                new ObjectParameter("DefectDescription", defectDescription) :
                new ObjectParameter("DefectDescription", typeof(string));
    
            var amountToBeChargeParameter = amountToBeCharge.HasValue ?
                new ObjectParameter("AmountToBeCharge", amountToBeCharge) :
                new ObjectParameter("AmountToBeCharge", typeof(decimal));
    
            var returnDateParameter = returnDate != null ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Repairing", branchIDParameter, engineerIDParameter, assignDateParameter, productIDParameter, itemDescriptionParameter, defectDescriptionParameter, amountToBeChargeParameter, returnDateParameter, creationDateParameter, createdByUserIDParameter, isReturnParameter);
        }
    
        public virtual int usp_Add_Salary(Nullable<int> branchID, Nullable<int> employeeID, Nullable<decimal> basicSalary, Nullable<decimal> commissionAmount, Nullable<decimal> advanceAmount, Nullable<decimal> loanAmount, Nullable<decimal> netSalary, string salaryMonth, Nullable<int> createdByUserID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(decimal));
    
            var commissionAmountParameter = commissionAmount.HasValue ?
                new ObjectParameter("CommissionAmount", commissionAmount) :
                new ObjectParameter("CommissionAmount", typeof(decimal));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var netSalaryParameter = netSalary.HasValue ?
                new ObjectParameter("NetSalary", netSalary) :
                new ObjectParameter("NetSalary", typeof(decimal));
    
            var salaryMonthParameter = salaryMonth != null ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Add_Salary", branchIDParameter, employeeIDParameter, basicSalaryParameter, commissionAmountParameter, advanceAmountParameter, loanAmountParameter, netSalaryParameter, salaryMonthParameter, createdByUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Sales(Nullable<int> branchID, string invoiceNumber, string invoiceDate, Nullable<int> customerID, Nullable<int> paymentMode, Nullable<decimal> totalAmount, Nullable<int> taxPer, Nullable<decimal> taxAmount, Nullable<decimal> payableAmount, Nullable<decimal> balance, Nullable<int> createdBy)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxPerParameter = taxPer.HasValue ?
                new ObjectParameter("TaxPer", taxPer) :
                new ObjectParameter("TaxPer", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Sales", branchIDParameter, invoiceNumberParameter, invoiceDateParameter, customerIDParameter, paymentModeParameter, totalAmountParameter, taxPerParameter, taxAmountParameter, payableAmountParameter, balanceParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_SalesDetails(Nullable<int> salesID, Nullable<int> prodcutCategoryID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> unitPrice, Nullable<decimal> amount)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var prodcutCategoryIDParameter = prodcutCategoryID.HasValue ?
                new ObjectParameter("ProdcutCategoryID", prodcutCategoryID) :
                new ObjectParameter("ProdcutCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_SalesDetails", salesIDParameter, prodcutCategoryIDParameter, productIDParameter, quantityParameter, unitPriceParameter, amountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Suppliers(Nullable<int> branchID, string supplierName, string contactPerson, string contactNumber, string email)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Suppliers", branchIDParameter, supplierNameParameter, contactPersonParameter, contactNumberParameter, emailParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_Add_Users(Nullable<int> branchID, string fullName, string dOB, string dOJ, string cNIC, string contactNumber, Nullable<decimal> basicSalary, Nullable<decimal> commissionAmount, string userName, string password)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var dOJParameter = dOJ != null ?
                new ObjectParameter("DOJ", dOJ) :
                new ObjectParameter("DOJ", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(decimal));
    
            var commissionAmountParameter = commissionAmount.HasValue ?
                new ObjectParameter("CommissionAmount", commissionAmount) :
                new ObjectParameter("CommissionAmount", typeof(decimal));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_Add_Users", branchIDParameter, fullNameParameter, dOBParameter, dOJParameter, cNICParameter, contactNumberParameter, basicSalaryParameter, commissionAmountParameter, userNameParameter, passwordParameter);
        }
    
        public virtual int usp_delete_BankAccounts(Nullable<int> bankAccountID)
        {
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_BankAccounts", bankAccountIDParameter);
        }
    
        public virtual int usp_delete_BankPayments(Nullable<int> bankPaymentID)
        {
            var bankPaymentIDParameter = bankPaymentID.HasValue ?
                new ObjectParameter("BankPaymentID", bankPaymentID) :
                new ObjectParameter("BankPaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_BankPayments", bankPaymentIDParameter);
        }
    
        public virtual int usp_delete_Banks(Nullable<int> bankID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Banks", bankIDParameter);
        }
    
        public virtual int usp_delete_Branches(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Branches", branchIDParameter);
        }
    
        public virtual int usp_delete_Brands(Nullable<int> brandID)
        {
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Brands", brandIDParameter);
        }
    
        public virtual int usp_delete_Commission(Nullable<int> commissionID)
        {
            var commissionIDParameter = commissionID.HasValue ?
                new ObjectParameter("CommissionID", commissionID) :
                new ObjectParameter("CommissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Commission", commissionIDParameter);
        }
    
        public virtual int usp_delete_Customers(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Customers", customerIDParameter);
        }
    
        public virtual int usp_delete_EmployeeAdvance(Nullable<int> employeeAdvanceID)
        {
            var employeeAdvanceIDParameter = employeeAdvanceID.HasValue ?
                new ObjectParameter("EmployeeAdvanceID", employeeAdvanceID) :
                new ObjectParameter("EmployeeAdvanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_EmployeeAdvance", employeeAdvanceIDParameter);
        }
    
        public virtual int usp_delete_EmployeeLoan(Nullable<int> employeeLoanID)
        {
            var employeeLoanIDParameter = employeeLoanID.HasValue ?
                new ObjectParameter("EmployeeLoanID", employeeLoanID) :
                new ObjectParameter("EmployeeLoanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_EmployeeLoan", employeeLoanIDParameter);
        }
    
        public virtual int usp_delete_Engineers(Nullable<int> engineerID)
        {
            var engineerIDParameter = engineerID.HasValue ?
                new ObjectParameter("EngineerID", engineerID) :
                new ObjectParameter("EngineerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Engineers", engineerIDParameter);
        }
    
        public virtual int usp_delete_Exchange(Nullable<int> exchangeID)
        {
            var exchangeIDParameter = exchangeID.HasValue ?
                new ObjectParameter("ExchangeID", exchangeID) :
                new ObjectParameter("ExchangeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Exchange", exchangeIDParameter);
        }
    
        public virtual int usp_delete_ExchangeDetails(Nullable<int> exchangeDetailID)
        {
            var exchangeDetailIDParameter = exchangeDetailID.HasValue ?
                new ObjectParameter("ExchangeDetailID", exchangeDetailID) :
                new ObjectParameter("ExchangeDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_ExchangeDetails", exchangeDetailIDParameter);
        }
    
        public virtual int usp_delete_Expenses(Nullable<int> expensesID)
        {
            var expensesIDParameter = expensesID.HasValue ?
                new ObjectParameter("ExpensesID", expensesID) :
                new ObjectParameter("ExpensesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Expenses", expensesIDParameter);
        }
    
        public virtual int usp_delete_ExpensesTypes(Nullable<int> expensesTypeID)
        {
            var expensesTypeIDParameter = expensesTypeID.HasValue ?
                new ObjectParameter("ExpensesTypeID", expensesTypeID) :
                new ObjectParameter("ExpensesTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_ExpensesTypes", expensesTypeIDParameter);
        }
    
        public virtual int usp_delete_Generations(Nullable<int> generationID)
        {
            var generationIDParameter = generationID.HasValue ?
                new ObjectParameter("GenerationID", generationID) :
                new ObjectParameter("GenerationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Generations", generationIDParameter);
        }
    
        public virtual int usp_delete_HardDisk(Nullable<int> hardDiskID)
        {
            var hardDiskIDParameter = hardDiskID.HasValue ?
                new ObjectParameter("HardDiskID", hardDiskID) :
                new ObjectParameter("HardDiskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_HardDisk", hardDiskIDParameter);
        }
    
        public virtual int usp_delete_Models(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Models", modelIDParameter);
        }
    
        public virtual int usp_delete_PaymentMethod(Nullable<int> paymentMethodID)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_PaymentMethod", paymentMethodIDParameter);
        }
    
        public virtual int usp_delete_PaymentMode(Nullable<int> paymentModeID)
        {
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_PaymentMode", paymentModeIDParameter);
        }
    
        public virtual int usp_delete_PaymentVoucherCustomers(Nullable<int> paymentVoucherCustomersID)
        {
            var paymentVoucherCustomersIDParameter = paymentVoucherCustomersID.HasValue ?
                new ObjectParameter("PaymentVoucherCustomersID", paymentVoucherCustomersID) :
                new ObjectParameter("PaymentVoucherCustomersID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_PaymentVoucherCustomers", paymentVoucherCustomersIDParameter);
        }
    
        public virtual int usp_delete_PaymentVoucherSupplier(Nullable<int> paymentVoucherSupplierID)
        {
            var paymentVoucherSupplierIDParameter = paymentVoucherSupplierID.HasValue ?
                new ObjectParameter("PaymentVoucherSupplierID", paymentVoucherSupplierID) :
                new ObjectParameter("PaymentVoucherSupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_PaymentVoucherSupplier", paymentVoucherSupplierIDParameter);
        }
    
        public virtual int usp_delete_Processor(Nullable<int> processorID)
        {
            var processorIDParameter = processorID.HasValue ?
                new ObjectParameter("ProcessorID", processorID) :
                new ObjectParameter("ProcessorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Processor", processorIDParameter);
        }
    
        public virtual int usp_delete_ProductCategory(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_ProductCategory", productCategoryIDParameter);
        }
    
        public virtual int usp_delete_Products(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Products", productIDParameter);
        }
    
        public virtual int usp_delete_ProfitAndLoss(Nullable<int> profitAndLossID)
        {
            var profitAndLossIDParameter = profitAndLossID.HasValue ?
                new ObjectParameter("ProfitAndLossID", profitAndLossID) :
                new ObjectParameter("ProfitAndLossID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_ProfitAndLoss", profitAndLossIDParameter);
        }
    
        public virtual int usp_delete_Purchase(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Purchase", purchaseIDParameter);
        }
    
        public virtual int usp_delete_PurchaseDetails(Nullable<int> purchaseDetailID)
        {
            var purchaseDetailIDParameter = purchaseDetailID.HasValue ?
                new ObjectParameter("PurchaseDetailID", purchaseDetailID) :
                new ObjectParameter("PurchaseDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_PurchaseDetails", purchaseDetailIDParameter);
        }
    
        public virtual int usp_delete_Rams(Nullable<int> ramID)
        {
            var ramIDParameter = ramID.HasValue ?
                new ObjectParameter("RamID", ramID) :
                new ObjectParameter("RamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Rams", ramIDParameter);
        }
    
        public virtual int usp_delete_Repairing(Nullable<int> repairingID)
        {
            var repairingIDParameter = repairingID.HasValue ?
                new ObjectParameter("RepairingID", repairingID) :
                new ObjectParameter("RepairingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Repairing", repairingIDParameter);
        }
    
        public virtual int usp_delete_Salary(Nullable<int> salaryID)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Salary", salaryIDParameter);
        }
    
        public virtual int usp_delete_Sales(Nullable<int> salesID)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Sales", salesIDParameter);
        }
    
        public virtual int usp_delete_SalesDetails(Nullable<int> salesDetailID)
        {
            var salesDetailIDParameter = salesDetailID.HasValue ?
                new ObjectParameter("SalesDetailID", salesDetailID) :
                new ObjectParameter("SalesDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_SalesDetails", salesDetailIDParameter);
        }
    
        public virtual int usp_delete_Suppliers(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Suppliers", supplierIDParameter);
        }
    
        public virtual int usp_delete_Users(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_Users", userIDParameter);
        }
    
        public virtual int usp_update_BankAccounts(Nullable<int> bankAccountID, Nullable<int> brancID, string bankName, string accountTitle, string accountNumber, string iBANNumber, string bankBranch)
        {
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var brancIDParameter = brancID.HasValue ?
                new ObjectParameter("BrancID", brancID) :
                new ObjectParameter("BrancID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountTitleParameter = accountTitle != null ?
                new ObjectParameter("AccountTitle", accountTitle) :
                new ObjectParameter("AccountTitle", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var iBANNumberParameter = iBANNumber != null ?
                new ObjectParameter("IBANNumber", iBANNumber) :
                new ObjectParameter("IBANNumber", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_BankAccounts", bankAccountIDParameter, brancIDParameter, bankNameParameter, accountTitleParameter, accountNumberParameter, iBANNumberParameter, bankBranchParameter);
        }
    
        public virtual int usp_update_BankPayments(Nullable<int> bankPaymentID, Nullable<int> branchID, Nullable<int> bankAccountID, Nullable<int> customerID, Nullable<int> salesID, Nullable<int> bankID, string cheqNumber, string pdcDate, string isClear)
        {
            var bankPaymentIDParameter = bankPaymentID.HasValue ?
                new ObjectParameter("BankPaymentID", bankPaymentID) :
                new ObjectParameter("BankPaymentID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var cheqNumberParameter = cheqNumber != null ?
                new ObjectParameter("CheqNumber", cheqNumber) :
                new ObjectParameter("CheqNumber", typeof(string));
    
            var pdcDateParameter = pdcDate != null ?
                new ObjectParameter("PdcDate", pdcDate) :
                new ObjectParameter("PdcDate", typeof(string));
    
            var isClearParameter = isClear != null ?
                new ObjectParameter("IsClear", isClear) :
                new ObjectParameter("IsClear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_BankPayments", bankPaymentIDParameter, branchIDParameter, bankAccountIDParameter, customerIDParameter, salesIDParameter, bankIDParameter, cheqNumberParameter, pdcDateParameter, isClearParameter);
        }
    
        public virtual int usp_update_Banks(Nullable<int> bankID, string bankName, Nullable<int> isDeleted)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Banks", bankIDParameter, bankNameParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_Branches(Nullable<int> branchID, string branchName, Nullable<int> isActive, Nullable<int> isDeleted)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Branches", branchIDParameter, branchNameParameter, isActiveParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_Brands(Nullable<int> brandID, string brandName)
        {
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Brands", brandIDParameter, brandNameParameter);
        }
    
        public virtual int usp_update_Commission(Nullable<int> commissionID, Nullable<int> branchID, Nullable<int> employeeID, Nullable<int> salesID, string salesDate, Nullable<decimal> commissionAmount)
        {
            var commissionIDParameter = commissionID.HasValue ?
                new ObjectParameter("CommissionID", commissionID) :
                new ObjectParameter("CommissionID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var salesDateParameter = salesDate != null ?
                new ObjectParameter("SalesDate", salesDate) :
                new ObjectParameter("SalesDate", typeof(string));
    
            var commissionAmountParameter = commissionAmount.HasValue ?
                new ObjectParameter("CommissionAmount", commissionAmount) :
                new ObjectParameter("CommissionAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Commission", commissionIDParameter, branchIDParameter, employeeIDParameter, salesIDParameter, salesDateParameter, commissionAmountParameter);
        }
    
        public virtual int usp_update_Customers(Nullable<int> customerID, Nullable<int> branchID, string customerName, string contactNumber, string customerReference, string address)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var customerReferenceParameter = customerReference != null ?
                new ObjectParameter("CustomerReference", customerReference) :
                new ObjectParameter("CustomerReference", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Customers", customerIDParameter, branchIDParameter, customerNameParameter, contactNumberParameter, customerReferenceParameter, addressParameter);
        }
    
        public virtual int usp_update_EmployeeAdvance(Nullable<int> employeeAdvanceID, Nullable<int> branchID, Nullable<int> employeeID, string advanceDate, Nullable<decimal> advanceAmount)
        {
            var employeeAdvanceIDParameter = employeeAdvanceID.HasValue ?
                new ObjectParameter("EmployeeAdvanceID", employeeAdvanceID) :
                new ObjectParameter("EmployeeAdvanceID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var advanceDateParameter = advanceDate != null ?
                new ObjectParameter("AdvanceDate", advanceDate) :
                new ObjectParameter("AdvanceDate", typeof(string));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_EmployeeAdvance", employeeAdvanceIDParameter, branchIDParameter, employeeIDParameter, advanceDateParameter, advanceAmountParameter);
        }
    
        public virtual int usp_update_EmployeeLoan(Nullable<int> employeeLoanID, Nullable<int> branchID, Nullable<int> employeeID, string loanDate, Nullable<decimal> loanAmount, Nullable<decimal> installmentAmount, Nullable<int> paidInstallment, Nullable<int> numberOfInstallment)
        {
            var employeeLoanIDParameter = employeeLoanID.HasValue ?
                new ObjectParameter("EmployeeLoanID", employeeLoanID) :
                new ObjectParameter("EmployeeLoanID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var loanDateParameter = loanDate != null ?
                new ObjectParameter("LoanDate", loanDate) :
                new ObjectParameter("LoanDate", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var installmentAmountParameter = installmentAmount.HasValue ?
                new ObjectParameter("InstallmentAmount", installmentAmount) :
                new ObjectParameter("InstallmentAmount", typeof(decimal));
    
            var paidInstallmentParameter = paidInstallment.HasValue ?
                new ObjectParameter("PaidInstallment", paidInstallment) :
                new ObjectParameter("PaidInstallment", typeof(int));
    
            var numberOfInstallmentParameter = numberOfInstallment.HasValue ?
                new ObjectParameter("numberOfInstallment", numberOfInstallment) :
                new ObjectParameter("numberOfInstallment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_EmployeeLoan", employeeLoanIDParameter, branchIDParameter, employeeIDParameter, loanDateParameter, loanAmountParameter, installmentAmountParameter, paidInstallmentParameter, numberOfInstallmentParameter);
        }
    
        public virtual int usp_update_Engineers(Nullable<int> engineerID, Nullable<int> branchID, string engineerName, string contactPerson, string contactNumber, string address)
        {
            var engineerIDParameter = engineerID.HasValue ?
                new ObjectParameter("EngineerID", engineerID) :
                new ObjectParameter("EngineerID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var engineerNameParameter = engineerName != null ?
                new ObjectParameter("EngineerName", engineerName) :
                new ObjectParameter("EngineerName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Engineers", engineerIDParameter, branchIDParameter, engineerNameParameter, contactPersonParameter, contactNumberParameter, addressParameter);
        }
    
        public virtual int usp_update_Exchange(Nullable<int> exchangeID, string pO, string poDate, Nullable<int> customerID, Nullable<decimal> totalAmount, Nullable<decimal> payableAmount, Nullable<int> isPaid, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> isDeleted)
        {
            var exchangeIDParameter = exchangeID.HasValue ?
                new ObjectParameter("ExchangeID", exchangeID) :
                new ObjectParameter("ExchangeID", typeof(int));
    
            var pOParameter = pO != null ?
                new ObjectParameter("PO", pO) :
                new ObjectParameter("PO", typeof(string));
    
            var poDateParameter = poDate != null ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Exchange", exchangeIDParameter, pOParameter, poDateParameter, customerIDParameter, totalAmountParameter, payableAmountParameter, isPaidParameter, creationDateParameter, createdByParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_ExchangeDetails(Nullable<int> exchangeDetailID, Nullable<int> exchangeID, Nullable<int> categoryID, Nullable<int> productID, Nullable<int> brandID, Nullable<int> modelID, Nullable<int> generation, Nullable<int> hardDiskID, Nullable<int> hDDAvailable, Nullable<int> ramID, Nullable<int> ramAvailable, Nullable<int> processorID, string screen, Nullable<int> screenAvailable, string keboard, Nullable<int> keyboardAvailable, string charger, Nullable<int> chargerAvailable, string board, Nullable<int> boardAvailable)
        {
            var exchangeDetailIDParameter = exchangeDetailID.HasValue ?
                new ObjectParameter("ExchangeDetailID", exchangeDetailID) :
                new ObjectParameter("ExchangeDetailID", typeof(int));
    
            var exchangeIDParameter = exchangeID.HasValue ?
                new ObjectParameter("ExchangeID", exchangeID) :
                new ObjectParameter("ExchangeID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var generationParameter = generation.HasValue ?
                new ObjectParameter("Generation", generation) :
                new ObjectParameter("Generation", typeof(int));
    
            var hardDiskIDParameter = hardDiskID.HasValue ?
                new ObjectParameter("HardDiskID", hardDiskID) :
                new ObjectParameter("HardDiskID", typeof(int));
    
            var hDDAvailableParameter = hDDAvailable.HasValue ?
                new ObjectParameter("HDDAvailable", hDDAvailable) :
                new ObjectParameter("HDDAvailable", typeof(int));
    
            var ramIDParameter = ramID.HasValue ?
                new ObjectParameter("RamID", ramID) :
                new ObjectParameter("RamID", typeof(int));
    
            var ramAvailableParameter = ramAvailable.HasValue ?
                new ObjectParameter("RamAvailable", ramAvailable) :
                new ObjectParameter("RamAvailable", typeof(int));
    
            var processorIDParameter = processorID.HasValue ?
                new ObjectParameter("ProcessorID", processorID) :
                new ObjectParameter("ProcessorID", typeof(int));
    
            var screenParameter = screen != null ?
                new ObjectParameter("Screen", screen) :
                new ObjectParameter("Screen", typeof(string));
    
            var screenAvailableParameter = screenAvailable.HasValue ?
                new ObjectParameter("ScreenAvailable", screenAvailable) :
                new ObjectParameter("ScreenAvailable", typeof(int));
    
            var keboardParameter = keboard != null ?
                new ObjectParameter("Keboard", keboard) :
                new ObjectParameter("Keboard", typeof(string));
    
            var keyboardAvailableParameter = keyboardAvailable.HasValue ?
                new ObjectParameter("KeyboardAvailable", keyboardAvailable) :
                new ObjectParameter("KeyboardAvailable", typeof(int));
    
            var chargerParameter = charger != null ?
                new ObjectParameter("Charger", charger) :
                new ObjectParameter("Charger", typeof(string));
    
            var chargerAvailableParameter = chargerAvailable.HasValue ?
                new ObjectParameter("ChargerAvailable", chargerAvailable) :
                new ObjectParameter("ChargerAvailable", typeof(int));
    
            var boardParameter = board != null ?
                new ObjectParameter("Board", board) :
                new ObjectParameter("Board", typeof(string));
    
            var boardAvailableParameter = boardAvailable.HasValue ?
                new ObjectParameter("BoardAvailable", boardAvailable) :
                new ObjectParameter("BoardAvailable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_ExchangeDetails", exchangeDetailIDParameter, exchangeIDParameter, categoryIDParameter, productIDParameter, brandIDParameter, modelIDParameter, generationParameter, hardDiskIDParameter, hDDAvailableParameter, ramIDParameter, ramAvailableParameter, processorIDParameter, screenParameter, screenAvailableParameter, keboardParameter, keyboardAvailableParameter, chargerParameter, chargerAvailableParameter, boardParameter, boardAvailableParameter);
        }
    
        public virtual int usp_update_Expenses(Nullable<int> expensesID, Nullable<int> branchID, Nullable<int> expensesTypeID, string expensesDate, string remarks, Nullable<int> expensesByID, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isDeleted)
        {
            var expensesIDParameter = expensesID.HasValue ?
                new ObjectParameter("ExpensesID", expensesID) :
                new ObjectParameter("ExpensesID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var expensesTypeIDParameter = expensesTypeID.HasValue ?
                new ObjectParameter("ExpensesTypeID", expensesTypeID) :
                new ObjectParameter("ExpensesTypeID", typeof(int));
    
            var expensesDateParameter = expensesDate != null ?
                new ObjectParameter("ExpensesDate", expensesDate) :
                new ObjectParameter("ExpensesDate", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var expensesByIDParameter = expensesByID.HasValue ?
                new ObjectParameter("ExpensesByID", expensesByID) :
                new ObjectParameter("ExpensesByID", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Expenses", expensesIDParameter, branchIDParameter, expensesTypeIDParameter, expensesDateParameter, remarksParameter, expensesByIDParameter, creationDateParameter, createdByUserIDParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_ExpensesTypes(Nullable<int> expensesTypeID, string expensesTypeName)
        {
            var expensesTypeIDParameter = expensesTypeID.HasValue ?
                new ObjectParameter("ExpensesTypeID", expensesTypeID) :
                new ObjectParameter("ExpensesTypeID", typeof(int));
    
            var expensesTypeNameParameter = expensesTypeName != null ?
                new ObjectParameter("ExpensesTypeName", expensesTypeName) :
                new ObjectParameter("ExpensesTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_ExpensesTypes", expensesTypeIDParameter, expensesTypeNameParameter);
        }
    
        public virtual int usp_update_Generations(Nullable<int> generationID, string generationName)
        {
            var generationIDParameter = generationID.HasValue ?
                new ObjectParameter("GenerationID", generationID) :
                new ObjectParameter("GenerationID", typeof(int));
    
            var generationNameParameter = generationName != null ?
                new ObjectParameter("GenerationName", generationName) :
                new ObjectParameter("GenerationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Generations", generationIDParameter, generationNameParameter);
        }
    
        public virtual int usp_update_HardDisk(Nullable<int> hardDiskID, string hardDiskName)
        {
            var hardDiskIDParameter = hardDiskID.HasValue ?
                new ObjectParameter("HardDiskID", hardDiskID) :
                new ObjectParameter("HardDiskID", typeof(int));
    
            var hardDiskNameParameter = hardDiskName != null ?
                new ObjectParameter("HardDiskName", hardDiskName) :
                new ObjectParameter("HardDiskName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_HardDisk", hardDiskIDParameter, hardDiskNameParameter);
        }
    
        public virtual int usp_update_Models(Nullable<int> modelID, string modelName)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Models", modelIDParameter, modelNameParameter);
        }
    
        public virtual int usp_update_PaymentMethod(Nullable<int> paymentMethodID, string paymentMethodName)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("PaymentMethodName", paymentMethodName) :
                new ObjectParameter("PaymentMethodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_PaymentMethod", paymentMethodIDParameter, paymentMethodNameParameter);
        }
    
        public virtual int usp_update_PaymentMode(Nullable<int> paymentModeID, string paymentModeName)
        {
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentModeNameParameter = paymentModeName != null ?
                new ObjectParameter("PaymentModeName", paymentModeName) :
                new ObjectParameter("PaymentModeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_PaymentMode", paymentModeIDParameter, paymentModeNameParameter);
        }
    
        public virtual int usp_update_PaymentVoucherCustomers(Nullable<int> paymentVoucherCustomersID, Nullable<int> branchID, Nullable<int> customerID, Nullable<int> salesID, Nullable<int> paymetMethodID, Nullable<int> bankID, string chequeNumber, string payOrderNumber, Nullable<int> isPDC, string pDCDate, Nullable<int> isPdcClear, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<decimal> balance, Nullable<int> condition, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> transactionTypeID, Nullable<int> isDeleted)
        {
            var paymentVoucherCustomersIDParameter = paymentVoucherCustomersID.HasValue ?
                new ObjectParameter("PaymentVoucherCustomersID", paymentVoucherCustomersID) :
                new ObjectParameter("PaymentVoucherCustomersID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var paymetMethodIDParameter = paymetMethodID.HasValue ?
                new ObjectParameter("PaymetMethodID", paymetMethodID) :
                new ObjectParameter("PaymetMethodID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var payOrderNumberParameter = payOrderNumber != null ?
                new ObjectParameter("PayOrderNumber", payOrderNumber) :
                new ObjectParameter("PayOrderNumber", typeof(string));
    
            var isPDCParameter = isPDC.HasValue ?
                new ObjectParameter("IsPDC", isPDC) :
                new ObjectParameter("IsPDC", typeof(int));
    
            var pDCDateParameter = pDCDate != null ?
                new ObjectParameter("PDCDate", pDCDate) :
                new ObjectParameter("PDCDate", typeof(string));
    
            var isPdcClearParameter = isPdcClear.HasValue ?
                new ObjectParameter("IsPdcClear", isPdcClear) :
                new ObjectParameter("IsPdcClear", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("TransactionTypeID", transactionTypeID) :
                new ObjectParameter("TransactionTypeID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_PaymentVoucherCustomers", paymentVoucherCustomersIDParameter, branchIDParameter, customerIDParameter, salesIDParameter, paymetMethodIDParameter, bankIDParameter, chequeNumberParameter, payOrderNumberParameter, isPDCParameter, pDCDateParameter, isPdcClearParameter, debitParameter, creditParameter, balanceParameter, conditionParameter, creationDateParameter, createdByUserIDParameter, transactionTypeIDParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_PaymentVoucherSupplier(Nullable<int> paymentVoucherSupplierID, Nullable<int> branchID, Nullable<int> supplierID, Nullable<int> purchaseID, Nullable<int> paymetMethodID, Nullable<int> bankID, string chequeNumber, string payOrderNumber, Nullable<int> isPDC, string pDCDate, Nullable<int> isPdcClear, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<decimal> balance, Nullable<int> condition, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isDeleted)
        {
            var paymentVoucherSupplierIDParameter = paymentVoucherSupplierID.HasValue ?
                new ObjectParameter("PaymentVoucherSupplierID", paymentVoucherSupplierID) :
                new ObjectParameter("PaymentVoucherSupplierID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var paymetMethodIDParameter = paymetMethodID.HasValue ?
                new ObjectParameter("PaymetMethodID", paymetMethodID) :
                new ObjectParameter("PaymetMethodID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var payOrderNumberParameter = payOrderNumber != null ?
                new ObjectParameter("PayOrderNumber", payOrderNumber) :
                new ObjectParameter("PayOrderNumber", typeof(string));
    
            var isPDCParameter = isPDC.HasValue ?
                new ObjectParameter("IsPDC", isPDC) :
                new ObjectParameter("IsPDC", typeof(int));
    
            var pDCDateParameter = pDCDate != null ?
                new ObjectParameter("PDCDate", pDCDate) :
                new ObjectParameter("PDCDate", typeof(string));
    
            var isPdcClearParameter = isPdcClear.HasValue ?
                new ObjectParameter("IsPdcClear", isPdcClear) :
                new ObjectParameter("IsPdcClear", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_PaymentVoucherSupplier", paymentVoucherSupplierIDParameter, branchIDParameter, supplierIDParameter, purchaseIDParameter, paymetMethodIDParameter, bankIDParameter, chequeNumberParameter, payOrderNumberParameter, isPDCParameter, pDCDateParameter, isPdcClearParameter, debitParameter, creditParameter, balanceParameter, conditionParameter, creationDateParameter, createdByUserIDParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_Processor(Nullable<int> processorID, string processorName)
        {
            var processorIDParameter = processorID.HasValue ?
                new ObjectParameter("ProcessorID", processorID) :
                new ObjectParameter("ProcessorID", typeof(int));
    
            var processorNameParameter = processorName != null ?
                new ObjectParameter("ProcessorName", processorName) :
                new ObjectParameter("ProcessorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Processor", processorIDParameter, processorNameParameter);
        }
    
        public virtual int usp_update_ProductCategory(Nullable<int> productCategoryID, Nullable<int> branchID, string categoryName)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_ProductCategory", productCategoryIDParameter, branchIDParameter, categoryNameParameter);
        }
    
        public virtual int usp_update_Products(Nullable<int> productID, Nullable<int> branchID, Nullable<int> prodcutCategoryID, string productName, string brandNameID, string modelID, string generationID, string ramID, string hardDiskID, string processorID, string productImage)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var prodcutCategoryIDParameter = prodcutCategoryID.HasValue ?
                new ObjectParameter("ProdcutCategoryID", prodcutCategoryID) :
                new ObjectParameter("ProdcutCategoryID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var brandNameIDParameter = brandNameID != null ?
                new ObjectParameter("BrandNameID", brandNameID) :
                new ObjectParameter("BrandNameID", typeof(string));
    
            var modelIDParameter = modelID != null ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(string));
    
            var generationIDParameter = generationID != null ?
                new ObjectParameter("GenerationID", generationID) :
                new ObjectParameter("GenerationID", typeof(string));
    
            var ramIDParameter = ramID != null ?
                new ObjectParameter("RamID", ramID) :
                new ObjectParameter("RamID", typeof(string));
    
            var hardDiskIDParameter = hardDiskID != null ?
                new ObjectParameter("HardDiskID", hardDiskID) :
                new ObjectParameter("HardDiskID", typeof(string));
    
            var processorIDParameter = processorID != null ?
                new ObjectParameter("ProcessorID", processorID) :
                new ObjectParameter("ProcessorID", typeof(string));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Products", productIDParameter, branchIDParameter, prodcutCategoryIDParameter, productNameParameter, brandNameIDParameter, modelIDParameter, generationIDParameter, ramIDParameter, hardDiskIDParameter, processorIDParameter, productImageParameter);
        }
    
        public virtual int usp_update_ProfitAndLoss(Nullable<int> profitAndLossID, Nullable<int> branchID, Nullable<int> purchaseDetailID, Nullable<int> salesID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> purchasePrice, Nullable<decimal> purchaseAmount, Nullable<decimal> salesPrice, Nullable<decimal> salesAmount, Nullable<decimal> profit, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isDeleted)
        {
            var profitAndLossIDParameter = profitAndLossID.HasValue ?
                new ObjectParameter("ProfitAndLossID", profitAndLossID) :
                new ObjectParameter("ProfitAndLossID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var purchaseDetailIDParameter = purchaseDetailID.HasValue ?
                new ObjectParameter("PurchaseDetailID", purchaseDetailID) :
                new ObjectParameter("PurchaseDetailID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var purchaseAmountParameter = purchaseAmount.HasValue ?
                new ObjectParameter("PurchaseAmount", purchaseAmount) :
                new ObjectParameter("PurchaseAmount", typeof(decimal));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(decimal));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(decimal));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_ProfitAndLoss", profitAndLossIDParameter, branchIDParameter, purchaseDetailIDParameter, salesIDParameter, productIDParameter, quantityParameter, purchasePriceParameter, purchaseAmountParameter, salesPriceParameter, salesAmountParameter, profitParameter, creationDateParameter, createdByUserIDParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_Purchase(Nullable<int> purchaseID, Nullable<int> branchID, Nullable<int> isTransferFromBranch, Nullable<int> transferFromBranchID, string poNumber, string poDate, string poReference, Nullable<int> supplierID, Nullable<int> paymentMode, Nullable<decimal> totalAmount, Nullable<int> taxPer, Nullable<decimal> taxAmount, Nullable<decimal> payableAmount, Nullable<int> isPaid, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> isDeleted)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var isTransferFromBranchParameter = isTransferFromBranch.HasValue ?
                new ObjectParameter("IsTransferFromBranch", isTransferFromBranch) :
                new ObjectParameter("IsTransferFromBranch", typeof(int));
    
            var transferFromBranchIDParameter = transferFromBranchID.HasValue ?
                new ObjectParameter("TransferFromBranchID", transferFromBranchID) :
                new ObjectParameter("TransferFromBranchID", typeof(int));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var poDateParameter = poDate != null ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(string));
    
            var poReferenceParameter = poReference != null ?
                new ObjectParameter("PoReference", poReference) :
                new ObjectParameter("PoReference", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxPerParameter = taxPer.HasValue ?
                new ObjectParameter("TaxPer", taxPer) :
                new ObjectParameter("TaxPer", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("isPaid", isPaid) :
                new ObjectParameter("isPaid", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Purchase", purchaseIDParameter, branchIDParameter, isTransferFromBranchParameter, transferFromBranchIDParameter, poNumberParameter, poDateParameter, poReferenceParameter, supplierIDParameter, paymentModeParameter, totalAmountParameter, taxPerParameter, taxAmountParameter, payableAmountParameter, isPaidParameter, creationDateParameter, createdByParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_PurchaseDetails(Nullable<int> purchaseDetailID, Nullable<int> purchaseID, Nullable<int> prodcutCategoryID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> unitPrice, Nullable<decimal> amount, Nullable<int> stockQuantity)
        {
            var purchaseDetailIDParameter = purchaseDetailID.HasValue ?
                new ObjectParameter("PurchaseDetailID", purchaseDetailID) :
                new ObjectParameter("PurchaseDetailID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var prodcutCategoryIDParameter = prodcutCategoryID.HasValue ?
                new ObjectParameter("ProdcutCategoryID", prodcutCategoryID) :
                new ObjectParameter("ProdcutCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_PurchaseDetails", purchaseDetailIDParameter, purchaseIDParameter, prodcutCategoryIDParameter, productIDParameter, quantityParameter, unitPriceParameter, amountParameter, stockQuantityParameter);
        }
    
        public virtual int usp_update_Rams(Nullable<int> ramID, string ramName)
        {
            var ramIDParameter = ramID.HasValue ?
                new ObjectParameter("RamID", ramID) :
                new ObjectParameter("RamID", typeof(int));
    
            var ramNameParameter = ramName != null ?
                new ObjectParameter("RamName", ramName) :
                new ObjectParameter("RamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Rams", ramIDParameter, ramNameParameter);
        }
    
        public virtual int usp_update_Repairing(Nullable<int> repairingID, Nullable<int> branchID, Nullable<int> engineerID, string assignDate, Nullable<int> productID, string itemDescription, string defectDescription, Nullable<decimal> amountToBeCharge, string returnDate, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isReturn)
        {
            var repairingIDParameter = repairingID.HasValue ?
                new ObjectParameter("RepairingID", repairingID) :
                new ObjectParameter("RepairingID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var engineerIDParameter = engineerID.HasValue ?
                new ObjectParameter("EngineerID", engineerID) :
                new ObjectParameter("EngineerID", typeof(int));
    
            var assignDateParameter = assignDate != null ?
                new ObjectParameter("AssignDate", assignDate) :
                new ObjectParameter("AssignDate", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var defectDescriptionParameter = defectDescription != null ?
                new ObjectParameter("DefectDescription", defectDescription) :
                new ObjectParameter("DefectDescription", typeof(string));
    
            var amountToBeChargeParameter = amountToBeCharge.HasValue ?
                new ObjectParameter("AmountToBeCharge", amountToBeCharge) :
                new ObjectParameter("AmountToBeCharge", typeof(decimal));
    
            var returnDateParameter = returnDate != null ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Repairing", repairingIDParameter, branchIDParameter, engineerIDParameter, assignDateParameter, productIDParameter, itemDescriptionParameter, defectDescriptionParameter, amountToBeChargeParameter, returnDateParameter, creationDateParameter, createdByUserIDParameter, isReturnParameter);
        }
    
        public virtual int usp_update_Salary(Nullable<int> salaryID, Nullable<int> branchID, Nullable<int> employeeID, Nullable<decimal> basicSalary, Nullable<decimal> commissionAmount, Nullable<decimal> advanceAmount, Nullable<decimal> loanAmount, Nullable<decimal> netSalary, string salaryMonth, Nullable<System.DateTime> creationDate, Nullable<int> createdByUserID, Nullable<int> isDeleted)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(decimal));
    
            var commissionAmountParameter = commissionAmount.HasValue ?
                new ObjectParameter("CommissionAmount", commissionAmount) :
                new ObjectParameter("CommissionAmount", typeof(decimal));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var netSalaryParameter = netSalary.HasValue ?
                new ObjectParameter("NetSalary", netSalary) :
                new ObjectParameter("NetSalary", typeof(decimal));
    
            var salaryMonthParameter = salaryMonth != null ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Salary", salaryIDParameter, branchIDParameter, employeeIDParameter, basicSalaryParameter, commissionAmountParameter, advanceAmountParameter, loanAmountParameter, netSalaryParameter, salaryMonthParameter, creationDateParameter, createdByUserIDParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_Sales(Nullable<int> salesID, Nullable<int> branchID, string invoiceNumber, string invoiceDate, Nullable<int> customerID, Nullable<int> paymentMode, Nullable<decimal> totalAmount, Nullable<int> taxPer, Nullable<decimal> taxAmount, Nullable<decimal> payableAmount, Nullable<int> isPaid, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> isReturn, Nullable<int> isDeleted)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxPerParameter = taxPer.HasValue ?
                new ObjectParameter("TaxPer", taxPer) :
                new ObjectParameter("TaxPer", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("isPaid", isPaid) :
                new ObjectParameter("isPaid", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Sales", salesIDParameter, branchIDParameter, invoiceNumberParameter, invoiceDateParameter, customerIDParameter, paymentModeParameter, totalAmountParameter, taxPerParameter, taxAmountParameter, payableAmountParameter, isPaidParameter, creationDateParameter, createdByParameter, isReturnParameter, isDeletedParameter);
        }
    
        public virtual int usp_update_SalesDetails(Nullable<int> salesDetailID, Nullable<int> salesID, Nullable<int> prodcutCategoryID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> unitPrice, Nullable<decimal> amount, Nullable<int> isReturn)
        {
            var salesDetailIDParameter = salesDetailID.HasValue ?
                new ObjectParameter("SalesDetailID", salesDetailID) :
                new ObjectParameter("SalesDetailID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var prodcutCategoryIDParameter = prodcutCategoryID.HasValue ?
                new ObjectParameter("ProdcutCategoryID", prodcutCategoryID) :
                new ObjectParameter("ProdcutCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_SalesDetails", salesDetailIDParameter, salesIDParameter, prodcutCategoryIDParameter, productIDParameter, quantityParameter, unitPriceParameter, amountParameter, isReturnParameter);
        }
    
        public virtual int usp_update_Suppliers(Nullable<int> supplierID, Nullable<int> branchID, string supplierName, string contactPerson, string contactNumber, string email)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Suppliers", supplierIDParameter, branchIDParameter, supplierNameParameter, contactPersonParameter, contactNumberParameter, emailParameter);
        }
    
        public virtual int usp_update_Users(Nullable<int> userID, Nullable<int> branchID, string fullName, string dOB, string dOJ, string cNIC, string contactNumber, Nullable<decimal> basicSalary, Nullable<decimal> commissionAmount, string userName, string password)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var dOJParameter = dOJ != null ?
                new ObjectParameter("DOJ", dOJ) :
                new ObjectParameter("DOJ", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(decimal));
    
            var commissionAmountParameter = commissionAmount.HasValue ?
                new ObjectParameter("CommissionAmount", commissionAmount) :
                new ObjectParameter("CommissionAmount", typeof(decimal));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_Users", userIDParameter, branchIDParameter, fullNameParameter, dOBParameter, dOJParameter, cNICParameter, contactNumberParameter, basicSalaryParameter, commissionAmountParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetPurchaseReport_Result> GetPurchaseReport(Nullable<int> poNumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> supID)
        {
            var poNumberParameter = poNumber.HasValue ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseReport_Result>("GetPurchaseReport", poNumberParameter, startDateParameter, endDateParameter, supIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseReportDetails_Result> GetPurchaseReportDetails(Nullable<int> poNumber)
        {
            var poNumberParameter = poNumber.HasValue ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseReportDetails_Result>("GetPurchaseReportDetails", poNumberParameter);
        }
    
        public virtual ObjectResult<GetPurchaseReportDetailsTotalAmounts_Result> GetPurchaseReportDetailsTotalAmounts(Nullable<int> poNumber)
        {
            var poNumberParameter = poNumber.HasValue ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseReportDetailsTotalAmounts_Result>("GetPurchaseReportDetailsTotalAmounts", poNumberParameter);
        }
    
        public virtual ObjectResult<GetSalesReport_Result> GetSalesReport(Nullable<int> invoice, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId)
        {
            var invoiceParameter = invoice.HasValue ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesReport_Result>("GetSalesReport", invoiceParameter, startDateParameter, endDateParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<GetSalesReportDetails_Result> GetSalesReportDetails(Nullable<int> invoice)
        {
            var invoiceParameter = invoice.HasValue ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesReportDetails_Result>("GetSalesReportDetails", invoiceParameter);
        }
    }
}
